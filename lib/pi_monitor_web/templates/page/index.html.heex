
<div style="height: 700px; width: 100%">
  <canvas id="myChart"></canvas>
</div>

<div id="app2">
  <a class="w3-button w3-green" @click="back" v-if="canNavigate">Back</a>
  <a class="w3-button w3-red" v-if="day &lt; 0 && canNavigate" @click="forward">Forward</a>
  <input class="w3-input" type="date" style="width: 30ex" v-if="canNavigate" v-model="date"/>
  <a class="w3-button w3-blue" @click="goToDate" v-if="canNavigate">Go to date</a>
  <div v-if="!canNavigate" class="w3-panel w3-gray"><p>Waiting for data â€¦</p></div>
</div>

<script>
  const ctx = document.getElementById('myChart');

  var chart = new Chart(ctx, {

    type: 'bar',
    data: {
      labels: [],
      datasets: [{
        label: 'Ping in seconds',
        data: [],
        barThickness: 1
      }]
    },
    options: {
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true
        },
        x: {
          ticks: {
            maxRotation: 90,
            minRotation: 90
          },
          type: 'time',
          time: {
            unit: 'hour',
            displayFormats:{
              hour: "yyyy-MM-dd HH:mm"
            }
          }
        }
      }
    }
  });

  const day_length = 86400000;
  const today = ((new Date().valueOf() / day_length)|0) * day_length;

  var vue = Vue.createApp({
    data() {
      return {
        day: 0,
        canNavigate: false,
        date: new Date().toLocaleString("se-SE").substr(0, 10)
      }
    },
    methods: {
      goToDate() {
        this.canNavigate = false;
        this.day = new Date(this.date).valueOf() - today
        this.reload();
      },
      back() {
        this.canNavigate = false;
        this.day = this.day - day_length;
        this.reload();
      },
      forward() {
        this.canNavigate = false;
        this.day = this.day + day_length;
        this.reload();
      },
      reload() {
        const xhttp = new XMLHttpRequest();
        let v = this;
        xhttp.onload = function() {
          let data = JSON.parse(this.responseText);
          let labels = data.map(x => x.start_time / 1000000)
          let times = data.map(x => x.duration / 1000000000)
          chart.data.labels = labels;
          chart.data.datasets[0].data = times;
          chart.update();
          v.canNavigate = true;
        }
        xhttp.open("GET", "/pings?timestamp=" + (today + this.day), true);
        xhttp.send();
      }
    },
    mounted() {
      const xhttp = new XMLHttpRequest();
      let v = this;
      xhttp.onload = function() {
        let data = JSON.parse(this.responseText);
        let labels = data.map(x => x.start_time / 1000000)
        let times = data.map(x => x.duration / 1000000000)
        chart.data.labels = labels;
        chart.data.datasets[0].data = times;
        chart.update();
        v.canNavigate = true;
      }
      xhttp.open("GET", "/pings?timestamp=" + today, true);
      xhttp.send();
    }
  }).mount('#app2')
</script>
